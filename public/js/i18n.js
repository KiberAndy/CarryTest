// üåê –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
let currentLanguage = 'ru';
const translations = {};
const supportedLanguages = ['ru', 'en'];

// üîé –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–µ—Ä–µ–≤–æ–¥—É –ø–æ –∫–ª—é—á—É
function t(keyPath) {
    return keyPath.split('.').reduce((obj, key) => obj?.[key], translations[currentLanguage]) || keyPath;
}

// üß† –£–º–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–≥–æ —è–∑—ã–∫–∞
function detectPreferredLanguage() {
    const storedLang = localStorage.getItem('preferredLanguage');
    if (storedLang && supportedLanguages.includes(storedLang)) {
        return storedLang;
    }

    const browserLangs = navigator.languages || [navigator.language];
    const normalized = browserLangs.map(l => l.slice(0, 2).toLowerCase());

    const matched = normalized.find(lang => supportedLanguages.includes(lang));
    return matched || 'ru'; // fallback
}

// üõ†Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
async function loadTranslations(lang) {
    if (!supportedLanguages.includes(lang)) {
        console.warn(`–Ø–∑—ã–∫ ${lang} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`);
        return;
    }

    try {
        const response = await fetch(`/lang/${lang}.json`);
        if (!response.ok) throw new Error('HTTP ' + response.status);
        translations[lang] = await response.json();
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ "${lang}":`, error);
    }
}

// üåç –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
async function setLanguage(lang) {
    if (!translations[lang]) {
        await loadTranslations(lang);
    }

    if (!translations[lang]) {
        console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ${lang}. –û—Å—Ç–∞–ª—Å—è ${currentLanguage}`);
        return;
    }

    currentLanguage = lang;
    localStorage.setItem('preferredLanguage', lang);
    applyTranslations();
}

// üé® –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∫–æ –≤—Å–µ–º –º–µ—Ç–∫–∞–º –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
function applyTranslations() {
    const tData = translations[currentLanguage];
    if (!tData) return;

    // Title –∏ description
    document.title = t('title');
    const metaDesc = document.querySelector('meta[name="description"]');
    if (metaDesc) metaDesc.content = t('description');

    // –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å data-i18n
    document.querySelectorAll('[data-i18n]').forEach((el) => {
        const key = el.getAttribute('data-i18n');
        const text = t(key);
        if (text) el.textContent = text;
    });

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ (tooltips)
    document.querySelectorAll('[data-tooltip]').forEach((el) => {
        const tooltipKey = el.getAttribute('data-tooltip');
        const tooltipText = t(tooltipKey);
        if (tooltipText) el.setAttribute('title', tooltipText);
    });

    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ i18n-–∫–ª—é—á–∏, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω—ã
    if (window.questions && Array.isArray(questions)) {
        questions.forEach((q) => {
            // –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ –∫–ª—é—á—É question_i18n
            if (q.question_i18n) {
                const translatedQuestion = t(`questions.${q.question_i18n}`);
                if (translatedQuestion) q.question = translatedQuestion;
            }

            // –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ tooltip, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if (q.tooltip) {
                const translatedTooltip = t(`tooltips.${q.tooltip}`);
                if (translatedTooltip) q.tooltipText = translatedTooltip;
            }

            // –ü–µ—Ä–µ–≤–æ–¥ –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ –µ–≥–æ –∫–ª—é—á—É i18n
            q.options?.forEach((opt) => {
                if (opt.i18n) {
                    const translatedOption = t(`options.${opt.i18n}`);
                    if (translatedOption) opt.text = translatedOption;
                }
            });
        });

        // –ï—Å–ª–∏ —É–∂–µ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–æ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º
        if (document.getElementById('quiz-container').children.length > 0) {
            renderQuiz();
        }
    }

    // –í–æ–ø—Ä–æ—Å—ã (–µ—Å–ª–∏ –µ—Å—Ç—å) - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if (window.questions && tData.questions) {
        questions.forEach((q, i) => {
            const qTrans = tData.questions[i];
            if (!qTrans) return;
            q.question = qTrans.question || q.question;
            q.options = qTrans.options || q.options;
        });

        if (document.getElementById('quiz-container').children.length > 0) {
            renderQuiz();
        }
    }
}

// üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    const defaultLang = detectPreferredLanguage();

    const langSelect = document.getElementById('language-select');
    if (langSelect) {
        langSelect.value = defaultLang;
        langSelect.addEventListener('change', (e) => {
            setLanguage(e.target.value);
        });
    }

    setLanguage(defaultLang);
});

// üìã –§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
function renderQuiz() {
    const quizContainer = document.getElementById('quiz-container');
    quizContainer.innerHTML = ''; // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º

    questions.forEach((question, index) => {
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
        const questionElement = document.createElement('div');
        questionElement.className = 'question';
        questionElement.innerHTML = `<strong>–í–æ–ø—Ä–æ—Å ${index + 1}/20</strong>: ${question.question}`;

        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
        const optionsContainer = document.createElement('div');
        optionsContainer.className = 'options';

        question.options.forEach((option) => {
            const optionElement = document.createElement('div');
            optionElement.className = 'option';
            optionElement.textContent = option.text; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ–±—ä–µ–∫—Ç–∞ option

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            optionElement.addEventListener('click', () => {
                // –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                console.log(`–í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç: ${option.text}`);
            });

            optionsContainer.appendChild(optionElement);
        });

        questionElement.appendChild(optionsContainer);
        quizContainer.appendChild(questionElement);
    });
}