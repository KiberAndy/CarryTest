const { createClient } = require('@supabase/supabase-js');

// üîÑ –°—Ç–∞–±–∏–ª—å–Ω—ã–π JSON.stringify (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
function stableStringify(obj) {
  if (obj === null || typeof obj !== 'object') {
    return JSON.stringify(obj);
  }
  if (Array.isArray(obj)) {
    return `[${obj.map(stableStringify).join(',')}]`;
  }
  const sortedKeys = Object.keys(obj).sort();
  const keyValuePairs = sortedKeys.map(key => 
    `"${key}":${stableStringify(obj[key])}`
  );
  return `{${keyValuePairs.join(',')}}`;
}

// üé≤ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (–Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
function generateRandomToken(baseString) {
  const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
  let hash = 0;

  // 1. –°–æ–∑–¥–∞–µ–º —Ö–µ—à –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
  for (let i = 0; i < baseString.length; i++) {
    const char = baseString.charCodeAt(i);
    hash = ((hash << 5) - hash) + char;
    hash |= 0; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ 32-–±–∏—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ
  }

  // 2. –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å, –Ω–æ —Ç–∞–∫, —á—Ç–æ–±—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–∞–≤–∞–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ç–æ–∫–µ–Ω
  const rnd = Math.abs(hash) % 1000000;
  let token = '';
  
  for (let i = 0; i < 7; i++) {
    const index = (rnd + i * 31) % chars.length;
    token += chars[index];
  }

  return token;
}

exports.handler = async (event) => {
  if (event.httpMethod !== 'POST') {
    return { statusCode: 405, body: JSON.stringify({ error: '–¢–æ–ª—å–∫–æ POST!' }) };
  }

  try {
    const { answers, scores } = JSON.parse(event.body);
    if (!answers || !scores) {
      throw new Error('–ù–µ—Ç answers –∏–ª–∏ scores!');
    }

    // 1. –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
    const dataString = stableStringify({ answers, scores });
    
    // 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω (—Ä–∞–Ω–¥–æ–º–Ω—ã–π, –Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
    const shareToken = generateRandomToken(dataString);

    // 3. –ò—â–µ–º –≤ Supabase, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
    );

    const { data: existing, error: lookupError } = await supabase
      .from('test_results')
      .select('share_token')
      .eq('answers_hash', shareToken)
      .maybeSingle();

    if (lookupError) throw lookupError;

    // 4. –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—É—é —Å—Å—ã–ª–∫—É
    if (existing) {
      return {
        statusCode: 200,
        body: JSON.stringify({ 
          share_token: existing.share_token,
          reused: true 
        })
      };
    }

    // 5. –ï—Å–ª–∏ –Ω–µ—Ç ‚Üí —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É
    const { data: newResult, error: insertError } = await supabase
      .from('test_results')
      .insert([{
        answers,
        scores,
        answers_hash: shareToken, // <- —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–µ—à –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        share_token: shareToken,  // <- —Å–∞–º —Ç–æ–∫–µ–Ω (b0NvyPh, 4q45ty –∏ —Ç. –¥.)
        created_at: new Date().toISOString()
      }])
      .select();

    if (insertError) throw insertError;

    return {
      statusCode: 200,
      body: JSON.stringify({ 
        share_token: shareToken,
        reused: false 
      })
    };

  } catch (error) {
    return {
      statusCode: 500,
      body: JSON.stringify({ 
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: error.message 
      })
    };
  }
};