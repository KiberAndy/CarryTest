// netlify/functions/saveResults.js

const { createClient } = require('@supabase/supabase-js');
const crypto = require('crypto');

// üîÅ –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è (–≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π hash)
function stableStringify(obj) {
  if (obj === null || typeof obj !== 'object') return JSON.stringify(obj);
  if (Array.isArray(obj)) return `[${obj.map(stableStringify).join(',')}]`;
  const sortedKeys = Object.keys(obj).sort();
  return `{${sortedKeys.map(key => `"${key}":${stableStringify(obj[key])}`).join(',')}}`;
}

// üß¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö—ç—à–∞, —Å base64 –æ–±—Ä–µ–∑–∫–æ–π)
function generateStableRandomToken(dataString, length = 7) {
  const hash = crypto.createHash('sha256').update(dataString).digest('hex');
  const base62 = Buffer.from(hash, 'hex').toString('base64')
    .replace(/[+/=]/g, '').slice(0, length).replace(/^\d/, 'a');
  return base62;
}

// üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è session_id (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –≤–¥—Ä—É–≥ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è)
function generateId(prefix = '') {
  return prefix + Math.random().toString(36).slice(2, 10);
}

exports.handler = async (event) => {
  if (event.httpMethod !== 'POST') {
    console.log('‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ POST. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É 405');
    return { statusCode: 405, body: 'Only POST allowed' };
  }

  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞...');
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    const body = event.body ? JSON.parse(event.body) : {};
    console.log('–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', body);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if (body.action === 'config') {
      console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
      return {
        statusCode: 200,
        body: JSON.stringify({
          SUPABASE_URL: process.env.SUPABASE_URL,
          SUPABASE_KEY: process.env.SUPABASE_KEY
        })
      };
    }

    // –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞
    const { answers, scores } = body;

    // üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!answers || typeof answers !== 'object') {
      console.log('‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã');
      throw new Error('Invalid or missing "answers"');
    }
    if (!scores || typeof scores !== 'object') {
      console.log('‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏');
      throw new Error('Invalid or missing "scores"');
    }

const answersString = stableStringify({ answers, scores });
const shareToken = generateStableRandomToken(answersString);
const sessionId = generateId('session-');

const serverTime = new Date().toISOString();  // –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Å —Å–µ—Ä–≤–µ—Ä–∞
return {
  statusCode: 200,
  body: JSON.stringify({
    share_token: shareToken,
    expires_at: expiresAt.toISOString(),
    server_time: serverTime  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Å —Å–µ—Ä–≤–µ—Ä–∞
  })
};


// ‚è≥ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞
const expiresAt = new Date();
expiresAt.setMinutes(expiresAt.getMinutes() + 1);

// –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞
console.log(`‚è≥ –¢–æ–∫–µ–Ω –±—É–¥–µ—Ç –∂–∏—Ç—å –¥–æ: ${expiresAt.toISOString()} ‚Äî –ø–æ—Ç–æ–º RIP ü™¶`);

const expiresAt = new Date(expires_at);
const currentTime = new Date();
const bufferTime = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –∑–∞–ø–∞—Å

if (expiresAt.getTime() + bufferTime > currentTime.getTime()) {
  console.log('‚úÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω!');
} else {
  console.log('‚ùå –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫!');
}


// 4. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
return {
  statusCode: 200,
  body: JSON.stringify({
    share_token: shareToken,
    expires_at: expiresAt.toISOString()  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º expiresAt –≤ –æ—Ç–≤–µ—Ç
  })
};

// üß™ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase...');
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);


// üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
const { data: existing, error: selectError } = await supabase
  .from('test_results')
  .select('share_token')
  .eq('answers_hash', shareToken)
  .maybeSingle();

if (selectError) {
  console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–∑ –±–∞–∑—ã:', selectError);
  throw selectError;
}

if (existing) {
  console.log('‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω');
  return {
    statusCode: 200,
    body: JSON.stringify({ share_token: existing.share_token, reused: true })
  };
}

// üìù –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–∞–±–ª–∏—Ü—É
console.log('üîÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ Supabase...');
const { error } = await supabase.from('test_results').insert([{
  answers,
  scores,
  session_id: sessionId,
  share_token: shareToken,
  answers_hash: shareToken,
  created_at: new Date().toISOString(),
  expires_at: expiresAt.toISOString() // üéØ –í–ê–ñ–ù–û: —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
}]);


    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Supabase:', error);
      throw error;
    }

    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    return {
      statusCode: 200,
      body: JSON.stringify({ share_token: shareToken, reused: false })
    };

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', error);
    return {
      statusCode: 500,
      body: JSON.stringify({
        error: error.message,
        stack: error.stack
      })
    };
  }
};
