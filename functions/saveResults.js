// netlify/functions/saveResults.js

const { createClient } = require('@supabase/supabase-js');
const crypto = require('crypto');

// üîÅ –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è (–≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π hash)
function stableStringify(obj) {
  if (obj === null || typeof obj !== 'object') return JSON.stringify(obj);
  if (Array.isArray(obj)) return `[${obj.map(stableStringify).join(',')}]`;
  const sortedKeys = Object.keys(obj).sort();
  return `{${sortedKeys.map(key => `"${key}":${stableStringify(obj[key])}`).join(',')}}`;
}

// üß¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö—ç—à–∞, —Å base64 –æ–±—Ä–µ–∑–∫–æ–π)
function generateStableRandomToken(dataString, length = 7) {
  const hash = crypto.createHash('sha256').update(dataString).digest('hex');
  const base62 = Buffer.from(hash, 'hex').toString('base64')
    .replace(/[+/=]/g, '').slice(0, length).replace(/^\d/, 'a');
  return base62;
}

// üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è session_id (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –≤–¥—Ä—É–≥ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è)
function generateId(prefix = '') {
  return prefix + Math.random().toString(36).slice(2, 10);
}

exports.handler = async (event) => {
  if (event.httpMethod !== 'POST') {
    console.log('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞');
    return { statusCode: 405, body: 'Only POST allowed' };
  }

  try {
    const { answers, scores } = JSON.parse(event.body);
    console.log('–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', { answers, scores });

    // üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!answers || typeof answers !== 'object') {
      console.log('‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã');
      throw new Error('Invalid or missing "answers"');
    }
    if (!scores || typeof scores !== 'object') {
      console.log('‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏');
      throw new Error('Invalid or missing "scores"');
    }

    const answersString = stableStringify({ answers, scores });
    const shareToken = generateStableRandomToken(answersString);
    const sessionId = generateId('session-');

    // üß™ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
    const supabase = createClient(
      process.env.SUPABASE_URL,
      process.env.SUPABASE_KEY
    );

    // üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
    const { data: existing } = await supabase
      .from('test_results')
      .select('share_token')
      .eq('answers_hash', shareToken)
      .maybeSingle();

    if (existing) {
      console.log('‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω');
      return {
        statusCode: 200,
        body: JSON.stringify({ share_token: existing.share_token, reused: true })
      };
    }

    // üìù –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const { error } = await supabase.from('test_results').insert([{
      answers,
      scores,
      session_id: sessionId,
      share_token: shareToken,
      answers_hash: shareToken,
      created_at: new Date().toISOString()
    }]);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Supabase:', error);
      throw error;
    }

    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    return {
      statusCode: 200,
      body: JSON.stringify({ share_token: shareToken, reused: false })
    };

  } catch (error) {
    console.error('‚ùå saveResults –æ—à–∏–±–∫–∞:', error);
    return {
      statusCode: 500,
      body: JSON.stringify({
        error: error.message,
        stack: error.stack
      })
    };
  }
};
