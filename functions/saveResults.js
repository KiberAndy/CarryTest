const { createClient } = require('@supabase/supabase-js');

// üîí –°—Ç–∞–±–∏–ª—å–Ω—ã–π stringify ‚Äî –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function stableStringify(obj) {
  if (Array.isArray(obj)) {
    return `[${obj.map(stableStringify).join(',')}]`;
  } else if (obj && typeof obj === 'object') {
    return `{${Object.keys(obj).sort().map(key =>
      `"${key}":${stableStringify(obj[key])}`
    ).join(',')}}`;
  }
  return JSON.stringify(obj);
}

// üîë –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–æ–∫–µ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
function generateShareToken(dataString) {
  let hash = 0;
  for (let i = 0; i < dataString.length; i++) {
    const char = dataString.charCodeAt(i);
    hash = ((hash << 5) - hash) + char;
    hash |= 0;
  }

  const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
  let token = '';
  hash = Math.abs(hash);

  for (let i = 0; i < 7; i++) {
    token += chars[(hash + i * 31) % chars.length];
  }

  return token;
}

exports.handler = async (event) => {
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞
  console.log('HTTP Method:', event.httpMethod);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      body: JSON.stringify({ error: '–¢–æ–ª—å–∫–æ POST-–∑–∞–ø—Ä–æ—Å—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã' })
    };
  }

  try {
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    console.log('Received body:', event.body);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
    const supabase = createClient(supabaseUrl, supabaseKey);

    // –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    const { answers, scores } = JSON.parse(event.body);

    if (!answers || !scores) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç answers –∏–ª–∏ scores');
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('Parsed answers:', answers);
    console.log('Parsed scores:', scores);

    // –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
    const dataString = stableStringify({ answers, scores });
    const shareToken = generateShareToken(dataString);
    console.log('Generated stable share token:', shareToken);

    // –°–æ–∑–¥–∞–µ–º —Ö–µ—à –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
    const answersHash = generateShareToken(dataString); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ö–µ—à –¥–ª—è –ø–æ–∏—Å–∫–∞

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const { data: existingResult, error: lookupError } = await supabase
      .from('test_results')
      .select('id, share_token')
      .eq('answers_hash', answersHash)
      .maybeSingle();

    if (lookupError) {
      console.error('Error while looking up result:', lookupError);
      throw lookupError;
    }

    // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω
    if (existingResult) {
      console.log('Found existing result:', existingResult);
      return {
        statusCode: 200,
        body: JSON.stringify({
          share_token: existingResult.share_token,
          id: existingResult.id,
          reused: true
        })
      };
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    const { data, error } = await supabase
      .from('test_results')
      .insert([{
        answers,
        scores,
        answers_hash: answersHash,
        share_token: shareToken,
        created_at: new Date().toISOString()
      }])
      .select();

    if (error) {
      console.error('Error while inserting result:', error);
      throw error;
    }

    console.log('New result inserted:', data[0]);

    return {
      statusCode: 200,
      body: JSON.stringify({
        share_token: shareToken,
        id: data[0].id,
        reused: false
      })
    };

  } catch (error) {
    console.error('Server Error:', error);

    return {
      statusCode: 500,
      body: JSON.stringify({
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: error.message
      })
    };
  }
};
