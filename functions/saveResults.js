// netlify/functions/saveResults.js
const { createClient } = require('@supabase/supabase-js');

exports.handler = async (event) => {
  console.log("üì• Incoming request:", {
    method: event.httpMethod,
    body: event.body
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
  if (event.httpMethod !== 'POST') {
    console.log("‚ùå –ú–µ—Ç–æ–¥ –Ω–µ POST");
    return {
      statusCode: 405,
      body: JSON.stringify({ error: '–¢–æ–ª—å–∫–æ POST-–∑–∞–ø—Ä–æ—Å—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã' })
    };
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

    console.log("üîê Supabase env:", {
      url: supabaseUrl,
      keyPresent: !!supabaseKey
    });

    if (!supabaseUrl || !supabaseKey) {
      throw new Error("‚ùå Supabase –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω—ã");
    }

    const supabase = createClient(supabaseUrl, supabaseKey);

    // –ü–∞—Ä—Å–∏–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    let requestData;
    try {
      requestData = JSON.parse(event.body);
      console.log("üì¶ Parsed request data:", requestData);
    } catch (parseError) {
      console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞:", parseError);
      return {
        statusCode: 400,
        body: JSON.stringify({ error: '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞' })
      };
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!requestData?.answers || !requestData?.scores) {
      console.log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:", requestData);
      return {
        statusCode: 400,
        body: JSON.stringify({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö' })
      };
    }

    const shareToken = Math.random().toString(36).substring(2, 8);
    const insertPayload = {
      answers: requestData.answers,
      scores: requestData.scores,
      share_token: shareToken,
      created_at: new Date().toISOString()
    };

    console.log("üìù Payload for Supabase insert:", insertPayload);

    const { data, error } = await supabase
      .from('test_results')
      .insert([insertPayload])
      .select();

    if (error) {
      console.log("‚ùå –û—à–∏–±–∫–∞ Supabase:", error);
      throw error;
    }

    console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Supabase:", data);

    return {
      statusCode: 200,
      body: JSON.stringify({
        share_token: shareToken,
        id: data[0].id
      })
    };

  } catch (error) {
    console.log("üî• –°—Ä–∞–±–æ—Ç–∞–ª catch:", error);
    return {
      statusCode: 500,
      body: JSON.stringify({
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: error.message
      })
    };
  }
};
